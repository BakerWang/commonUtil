<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- ====================================================================== 
		自动扫描的包名:对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.cdeledu" />
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<!-- <context:component-scan base-package="com.cdeledu.springframework"> -->
	<!-- <context:exclude-filter type="annotation" -->
	<!-- expression="com.cdeledu.springframework.service" /> -->
	<!-- </context:component-scan> -->

	<!-- ====================================================================== 
		启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- 默认的注解映射的支持 
		<mvc:annotation-driven /> 
		会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter两个bean,
		是spring MVC为@Controllers分发请求所必须的. 
	-->
	<mvc:annotation-driven />

	<!-- ====================================================================== 
		使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器
		标签内可以设定多个拦截器;
		现实开发需求中可能分为前端(User)登录和后台登陆(Admin) 
		-->
	<mvc:interceptors><!--  拦截器的根元素 -->
		<mvc:interceptor> <!-- 拦截器配置项 -->
			<!--设置拦截的路径,例如：后台目录:如果不配置或/*,将拦截所有的Controller -->
			<mvc:mapping path="" />
			<mvc:exclude-mapping path=""> <!-- 不被拦截范围（路径）；例如：后台登录页面 -->
			<bean></bean><!-- 自定义拦截控制器bean -->
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- ====================================================================== 
		默认的视图解析器 (如果你要访问index视图,它会自动 prefix(前缀)+index+suffix(后缀),生成/WEB-INF/views/index.jsp) -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 如果你要访问index视图， 它会自动 prefix(前缀) + index + suffix(后缀) -->
		<property name="prefix" value="/WEB-INF/views/" />
		<!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- ====================================================================== 
		直接跳转:对模型视图名称的解析，即定义JSP文件的位置，在模型视图名称添加前后缀 -->
	<mvc:view-controller path="/index" view-name="index" />

	<!-- ====================================================================== 
		静态资源访问 -->
	<!-- 容器默认的defaultServletHandler处理所有静态内容与RequestMapping处理的URL -->
	<mvc:default-servlet-handler />
	<!-- 静态资源 -->
	<mvc:resources location="/resources/" mapping="/resources/**"
		cache-period="31556926" />
	<!-- ====================================================================== 
		避免IE执行AJA时候，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
</beans>
